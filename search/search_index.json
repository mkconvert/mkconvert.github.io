{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The MkTable API provides a simple way to convert CSV or JSON data to a plain text table. MkTable supports many different output formats. For example: Simple Plain Markdown Grid reStructuredText MediaWiki Jira Pokemon Type Number --------- -------- -------- Venusaur Grass 3 Charizard Fire 6 Blastoise Water 9 Pikachu Electric 25 Pokemon Type Number Venusaur Grass 3 Charizard Fire 6 Blastoise Water 9 Pikachu Electric 25 | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | +-----------+----------+----------+ | Pokemon | Type | Number | +===========+==========+==========+ | Venusaur | Grass | 3 | +-----------+----------+----------+ | Charizard | Fire | 6 | +-----------+----------+----------+ | Blastoise | Water | 9 | +-----------+----------+----------+ | Pikachu | Electric | 25 | +-----------+----------+----------+ ========= ======== ======== Pokemon Type Number ========= ======== ======== Venusaur Grass 3 Charizard Fire 6 Blastoise Water 9 Pikachu Electric 25 ========= ======== ======== {| class=\"wikitable\" style=\"text-align: left;\" |+ <!-- caption --> |- ! Pokemon !! Type !! align=\"right\"| Number |- | Venusaur || Grass || align=\"right\"| 3 |- | Charizard || Fire || align=\"right\"| 6 |- | Blastoise || Water || align=\"right\"| 9 |- | Pikachu || Electric || align=\"right\"| 25 |} || Pokemon || Type || Number || | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | For a full list of examples see Table Format Examples . RapidAPI The MkTable API is available via RapidAPI . You'll need to sign up to RapidAPI and subscribe to the MkTable API in order to use it. There are free and paid subscriptions to suit multiple use-cases. Base URL All URLs referenced in this documentation have the following base: https://mktable.p.rapidapi.com The API is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported. Next Steps Follow one of the quickstart guides or dive into the API Reference to view all available options.","title":"Introduction"},{"location":"#introduction","text":"The MkTable API provides a simple way to convert CSV or JSON data to a plain text table. MkTable supports many different output formats. For example: Simple Plain Markdown Grid reStructuredText MediaWiki Jira Pokemon Type Number --------- -------- -------- Venusaur Grass 3 Charizard Fire 6 Blastoise Water 9 Pikachu Electric 25 Pokemon Type Number Venusaur Grass 3 Charizard Fire 6 Blastoise Water 9 Pikachu Electric 25 | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | +-----------+----------+----------+ | Pokemon | Type | Number | +===========+==========+==========+ | Venusaur | Grass | 3 | +-----------+----------+----------+ | Charizard | Fire | 6 | +-----------+----------+----------+ | Blastoise | Water | 9 | +-----------+----------+----------+ | Pikachu | Electric | 25 | +-----------+----------+----------+ ========= ======== ======== Pokemon Type Number ========= ======== ======== Venusaur Grass 3 Charizard Fire 6 Blastoise Water 9 Pikachu Electric 25 ========= ======== ======== {| class=\"wikitable\" style=\"text-align: left;\" |+ <!-- caption --> |- ! Pokemon !! Type !! align=\"right\"| Number |- | Venusaur || Grass || align=\"right\"| 3 |- | Charizard || Fire || align=\"right\"| 6 |- | Blastoise || Water || align=\"right\"| 9 |- | Pikachu || Electric || align=\"right\"| 25 |} || Pokemon || Type || Number || | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | For a full list of examples see Table Format Examples .","title":"Introduction"},{"location":"#rapidapi","text":"The MkTable API is available via RapidAPI . You'll need to sign up to RapidAPI and subscribe to the MkTable API in order to use it. There are free and paid subscriptions to suit multiple use-cases.","title":"RapidAPI"},{"location":"#base-url","text":"All URLs referenced in this documentation have the following base: https://mktable.p.rapidapi.com The API is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.","title":"Base URL"},{"location":"#next-steps","text":"Follow one of the quickstart guides or dive into the API Reference to view all available options.","title":"Next Steps"},{"location":"convert/","text":"/convert The /convert endpoint accepts requests containing either CSV or JSON data and converts it to a plain text table. Warning The Content-Type header must be sent with each request. Use text/plain for CSV data and application/json for JSON. Request Body The body of the request should contain the data to be converted. This will either be a string of CSV or JSON data. For example: CSV Data JSON Array JSON Object Pokemon,Type,Number Venusaur,Grass,3 Charizard,Fire,6 Blastoise,Water,9 Pikachu,Electric,25 [ { \"Pokemon\" : \"Venusaur\" , \"Type\" : \"Grass\" , \"Number\" : 3 }, { \"Pokemon\" : \"Charizard\" , \"Type\" : \"Fire\" , \"Number\" : 6 }, { \"Pokemon\" : \"Blastoise\" , \"Type\" : \"Water\" , \"Number\" : 9 }, { \"Pokemon\" : \"Pikachu\" , \"Type\" : \"Electric\" , \"Number\" : 25 } ] { \"Pokemon\" : { \"row1\" : \"Venusaur\" , \"row2\" : \"Charizard\" , \"row3\" : \"Blastoise\" , \"row4\" : \"Pikachu\" }, \"Type\" : { \"row1\" : \"Grass\" , \"row2\" : \"Fire\" , \"row3\" : \"Water\" , \"row4\" : \"Electric\" }, \"Number\" : { \"row1\" : 3 , \"row2\" : 6 , \"row3\" : 9 , \"row4\" : 25 } } Table Parameters table-tablefmt Specifies which flavour of plain text table to convert to. Info Accepts : string Default : simple Example /convert?table-tablefmt = github The available options are: plain simple github grid fancy_grid pipe orgtbl jira presto pretty psql rst mediawiki moinmoin youtrack html unsafehtml latex latex_raw latex_booktabs latex_longtable textile tsv For a full list of examples see Table Format Examples . table-numalign Override the default column alignment for columns identified as containing integers. Info Accepts : string Default : right Example /convert?table-numalign = center The available options are: right center left decimal none (disable alignment) table-stralign Override the default column alignment for columns identified as containing strings. Info Accepts : string Default : left Example /convert?table-stralign = center The available options are: right center left none (disable alignment) table-disable-numparse By default, all values which can be parsed as an integer are converted (e.g. \"1\" is converted to 1 ). Use this option to disable this behaviour. Info Accepts : bool Default : false Example /convert?table-disable-numparse = true table-floatfmt Define custom number formatting applied to all columns containing decimal numbers. Info Accepts : string Default : none Example /convert?table-floatfmt = .4f CSV Parameters The following URL query parameters are available to manipulate CSV data. csv-sep The delimeter to use when parsing CSV data. Info Accepts : string Default : ',' Example /convert?csv-sep = | csv-delim-whitespace Specifies whether or not whitespace (e.g. ' ' ) should be used as the delimiter when parsing CSV data. Cannot be used with csv-sep . Info Accepts : bool Default : false Example /convert?csv-delim-whitespace = true csv-header Row number to use as the column names. Specify none if your CSV data does not have a header row and each column will use its index as a header value instead. Info Accepts : int, none Default : 0 Example /convert?csv-header = none csv-prefix Prefix to add to column numbers when no header values are provided (i.e. when using csv-header=none). Info Accepts : string Default : None Example /convert?csv-header = none & csv-prefix = col csv-names List of column names to use. If the CSV data contains a header row you should include csv-header=0 to override the column names. Duplicates in this list are not allowed. Info Accepts : list Default : None Example /convert?csv-header = 0 & csv-names = column12,column13,column14 csv-usecols Return a subset of columns from the original data. Info Accepts : intlist Default : None Example /convert?csv-usecols = 0 ,2,4 csv-skipinitialspace Skip spaces after delimiter when parsing CSV data. Info Accepts : bool Default : false Example /convert?csv-skipinitialspace = true csv-skiprows A list of line numbers to skip (0-indexed) or the number of lines to skip at the start of the file. Info Accepts : intlist, int Default : None Example /convert?csv-skiprows = 25 /convert?csv-skiprows = 1 ,23,45 csv-skipfooter Number of lines at bottom of file to skip. Info Accepts : int Default : None Example /convert?csv-skipfooter = 5 csv-keep-default-na Whether or not to include the default NaN values when parsing the data. Info Accepts : bool Default : True Example /convert?csv-keep-default-na = false csv-skip-blank-lines If True, skip over blank lines rather than interpreting as NaN values. Info Accepts : bool Default : True Example /convert?csv-skip-blank-lines = false","title":"/convert"},{"location":"convert/#convert","text":"The /convert endpoint accepts requests containing either CSV or JSON data and converts it to a plain text table. Warning The Content-Type header must be sent with each request. Use text/plain for CSV data and application/json for JSON.","title":"/convert"},{"location":"convert/#request-body","text":"The body of the request should contain the data to be converted. This will either be a string of CSV or JSON data. For example: CSV Data JSON Array JSON Object Pokemon,Type,Number Venusaur,Grass,3 Charizard,Fire,6 Blastoise,Water,9 Pikachu,Electric,25 [ { \"Pokemon\" : \"Venusaur\" , \"Type\" : \"Grass\" , \"Number\" : 3 }, { \"Pokemon\" : \"Charizard\" , \"Type\" : \"Fire\" , \"Number\" : 6 }, { \"Pokemon\" : \"Blastoise\" , \"Type\" : \"Water\" , \"Number\" : 9 }, { \"Pokemon\" : \"Pikachu\" , \"Type\" : \"Electric\" , \"Number\" : 25 } ] { \"Pokemon\" : { \"row1\" : \"Venusaur\" , \"row2\" : \"Charizard\" , \"row3\" : \"Blastoise\" , \"row4\" : \"Pikachu\" }, \"Type\" : { \"row1\" : \"Grass\" , \"row2\" : \"Fire\" , \"row3\" : \"Water\" , \"row4\" : \"Electric\" }, \"Number\" : { \"row1\" : 3 , \"row2\" : 6 , \"row3\" : 9 , \"row4\" : 25 } }","title":"Request Body"},{"location":"convert/#table-parameters","text":"","title":"Table Parameters"},{"location":"convert/#table-tablefmt","text":"Specifies which flavour of plain text table to convert to. Info Accepts : string Default : simple Example /convert?table-tablefmt = github The available options are: plain simple github grid fancy_grid pipe orgtbl jira presto pretty psql rst mediawiki moinmoin youtrack html unsafehtml latex latex_raw latex_booktabs latex_longtable textile tsv For a full list of examples see Table Format Examples .","title":"table-tablefmt"},{"location":"convert/#table-numalign","text":"Override the default column alignment for columns identified as containing integers. Info Accepts : string Default : right Example /convert?table-numalign = center The available options are: right center left decimal none (disable alignment)","title":"table-numalign"},{"location":"convert/#table-stralign","text":"Override the default column alignment for columns identified as containing strings. Info Accepts : string Default : left Example /convert?table-stralign = center The available options are: right center left none (disable alignment)","title":"table-stralign"},{"location":"convert/#table-disable-numparse","text":"By default, all values which can be parsed as an integer are converted (e.g. \"1\" is converted to 1 ). Use this option to disable this behaviour. Info Accepts : bool Default : false Example /convert?table-disable-numparse = true","title":"table-disable-numparse"},{"location":"convert/#table-floatfmt","text":"Define custom number formatting applied to all columns containing decimal numbers. Info Accepts : string Default : none Example /convert?table-floatfmt = .4f","title":"table-floatfmt"},{"location":"convert/#csv-parameters","text":"The following URL query parameters are available to manipulate CSV data.","title":"CSV Parameters"},{"location":"convert/#csv-sep","text":"The delimeter to use when parsing CSV data. Info Accepts : string Default : ',' Example /convert?csv-sep = |","title":"csv-sep"},{"location":"convert/#csv-delim-whitespace","text":"Specifies whether or not whitespace (e.g. ' ' ) should be used as the delimiter when parsing CSV data. Cannot be used with csv-sep . Info Accepts : bool Default : false Example /convert?csv-delim-whitespace = true","title":"csv-delim-whitespace"},{"location":"convert/#csv-header","text":"Row number to use as the column names. Specify none if your CSV data does not have a header row and each column will use its index as a header value instead. Info Accepts : int, none Default : 0 Example /convert?csv-header = none","title":"csv-header"},{"location":"convert/#csv-prefix","text":"Prefix to add to column numbers when no header values are provided (i.e. when using csv-header=none). Info Accepts : string Default : None Example /convert?csv-header = none & csv-prefix = col","title":"csv-prefix"},{"location":"convert/#csv-names","text":"List of column names to use. If the CSV data contains a header row you should include csv-header=0 to override the column names. Duplicates in this list are not allowed. Info Accepts : list Default : None Example /convert?csv-header = 0 & csv-names = column12,column13,column14","title":"csv-names"},{"location":"convert/#csv-usecols","text":"Return a subset of columns from the original data. Info Accepts : intlist Default : None Example /convert?csv-usecols = 0 ,2,4","title":"csv-usecols"},{"location":"convert/#csv-skipinitialspace","text":"Skip spaces after delimiter when parsing CSV data. Info Accepts : bool Default : false Example /convert?csv-skipinitialspace = true","title":"csv-skipinitialspace"},{"location":"convert/#csv-skiprows","text":"A list of line numbers to skip (0-indexed) or the number of lines to skip at the start of the file. Info Accepts : intlist, int Default : None Example /convert?csv-skiprows = 25 /convert?csv-skiprows = 1 ,23,45","title":"csv-skiprows"},{"location":"convert/#csv-skipfooter","text":"Number of lines at bottom of file to skip. Info Accepts : int Default : None Example /convert?csv-skipfooter = 5","title":"csv-skipfooter"},{"location":"convert/#csv-keep-default-na","text":"Whether or not to include the default NaN values when parsing the data. Info Accepts : bool Default : True Example /convert?csv-keep-default-na = false","title":"csv-keep-default-na"},{"location":"convert/#csv-skip-blank-lines","text":"If True, skip over blank lines rather than interpreting as NaN values. Info Accepts : bool Default : True Example /convert?csv-skip-blank-lines = false","title":"csv-skip-blank-lines"},{"location":"table-examples/","text":"Table Format Examples Blah","title":"Table Format Examples"},{"location":"table-examples/#table-format-examples","text":"Blah","title":"Table Format Examples"},{"location":"getting-started/nodejs/","text":"Node.js Quickstart With just a few lines of code, your node.js application can convert CSV and JSON data to awesome plain-text tables. Examples CSV Data JSON Array const axios = require ( 'axios' ); const stringify = require ( 'csv-stringify' ) data = [ [ \"Pokemon\" , \"Type\" , \"Number\" ], [ \"Venusaur\" , \"Grass\" , 3 ], [ \"Charizard\" , \"Fire\" , 6 ], [ \"Blastoise\" , \"Water\" , 9 ], [ \"Pikachu\" , \"Electric\" , 25 ] ] url = \"https://mktable.p.rapidapi.com/convert?table-tablefmt=github\" config = { \"headers\" : { \"Content-Type\" : \"text/plain\" , \"X-RapidAPI-Host\" : \"mktable.p.rapidapi.com\" , \"X-RapidAPI-Key\" : \"<rapid api key>\" } } stringify ( data , ( err , output ) => { axios . post ( url , output , config ) . then ( function ( response ) { console . log ( response . data . data ); }) . catch ( function ( error ) { console . log ( error ); }) }) # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | const axios = require ( \"axios\" ); data = [ { \"Pokemon\" : \"Venusaur\" , \"Type\" : \"Grass\" , \"Number\" : 3 }, { \"Pokemon\" : \"Charizard\" , \"Type\" : \"Fire\" , \"Number\" : 6 }, { \"Pokemon\" : \"Blastoise\" , \"Type\" : \"Water\" , \"Number\" : 9 }, { \"Pokemon\" : \"Pikachu\" , \"Type\" : \"Electric\" , \"Number\" : 25 } ] url = \"https://mktable.p.rapidapi.com/convert?table-tablefmt=github\" config = { \"headers\" : { \"Content-Type\" : \"application/json\" , \"X-RapidAPI-Host\" : \"mktable.p.rapidapi.com\" , \"X-RapidAPI-Key\" : \"<rapid api key>\" } } axios . post ( url , data , config ) . then ( function ( response ) { console . log ( response . data . data ); }) . catch ( function ( error ) { console . log ( error ); }); # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | Next Steps Dive into the API Reference to view all available options.","title":"Node.js Quickstart"},{"location":"getting-started/nodejs/#nodejs-quickstart","text":"With just a few lines of code, your node.js application can convert CSV and JSON data to awesome plain-text tables.","title":"Node.js Quickstart"},{"location":"getting-started/nodejs/#examples","text":"CSV Data JSON Array const axios = require ( 'axios' ); const stringify = require ( 'csv-stringify' ) data = [ [ \"Pokemon\" , \"Type\" , \"Number\" ], [ \"Venusaur\" , \"Grass\" , 3 ], [ \"Charizard\" , \"Fire\" , 6 ], [ \"Blastoise\" , \"Water\" , 9 ], [ \"Pikachu\" , \"Electric\" , 25 ] ] url = \"https://mktable.p.rapidapi.com/convert?table-tablefmt=github\" config = { \"headers\" : { \"Content-Type\" : \"text/plain\" , \"X-RapidAPI-Host\" : \"mktable.p.rapidapi.com\" , \"X-RapidAPI-Key\" : \"<rapid api key>\" } } stringify ( data , ( err , output ) => { axios . post ( url , output , config ) . then ( function ( response ) { console . log ( response . data . data ); }) . catch ( function ( error ) { console . log ( error ); }) }) # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | const axios = require ( \"axios\" ); data = [ { \"Pokemon\" : \"Venusaur\" , \"Type\" : \"Grass\" , \"Number\" : 3 }, { \"Pokemon\" : \"Charizard\" , \"Type\" : \"Fire\" , \"Number\" : 6 }, { \"Pokemon\" : \"Blastoise\" , \"Type\" : \"Water\" , \"Number\" : 9 }, { \"Pokemon\" : \"Pikachu\" , \"Type\" : \"Electric\" , \"Number\" : 25 } ] url = \"https://mktable.p.rapidapi.com/convert?table-tablefmt=github\" config = { \"headers\" : { \"Content-Type\" : \"application/json\" , \"X-RapidAPI-Host\" : \"mktable.p.rapidapi.com\" , \"X-RapidAPI-Key\" : \"<rapid api key>\" } } axios . post ( url , data , config ) . then ( function ( response ) { console . log ( response . data . data ); }) . catch ( function ( error ) { console . log ( error ); }); # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 |","title":"Examples"},{"location":"getting-started/nodejs/#next-steps","text":"Dive into the API Reference to view all available options.","title":"Next Steps"},{"location":"getting-started/python/","text":"Python Quickstart With just a few lines of code, your python application can convert CSV and JSON data to awesome plain-text tables. Info These examples are all written for Python 3. Examples CSV Data JSON Array import csv import io import json import requests csvdata = [ [ \"Pokemon\" , \"Type\" , \"Number\" ], [ \"Venusaur\" , \"Grass\" , 3 ], [ \"Charizard\" , \"Fire\" , 6 ], [ \"Blastoise\" , \"Water\" , 9 ], [ \"Pikachu\" , \"Electric\" , 25 ] ] output = io . StringIO () writer = csv . writer ( output ) writer . writerows ( csvdata ) url = \"https://mktable.p.rapidapi.com/convert?table-tablefmt=github\" headers = { \"Content-Type\" : \"text/plain\" , \"X-RapidAPI-Host\" : \"mktable.p.rapidapi.com\" , \"X-RapidAPI-Key\" : \"<rapid api key>\" } response = requests . request ( \"POST\" , url , data = output . getvalue (), headers = headers ) print ( json . loads ( response . text )[ \"data\" ]) # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | import json import requests data = [ { \"Pokemon\" : \"Venusaur\" , \"Type\" : \"Grass\" , \"Number\" : 3 }, { \"Pokemon\" : \"Charizard\" , \"Type\" : \"Fire\" , \"Number\" : 6 }, { \"Pokemon\" : \"Blastoise\" , \"Type\" : \"Water\" , \"Number\" : 9 }, { \"Pokemon\" : \"Pikachu\" , \"Type\" : \"Electric\" , \"Number\" : 25 } ] url = \"https://mktable.p.rapidapi.com/convert?table-tablefmt=github\" headers = { \"Content-Type\" : \"application/json\" , \"X-RapidAPI-Host\" : \"mktable.p.rapidapi.com\" , \"X-RapidAPI-Key\" : \"<rapid api key>\" } response = requests . request ( \"POST\" , url , data = json . dumps ( data ), headers = headers ) print ( json . loads ( response . text )[ \"data\" ]) # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | Next Steps Dive into the API Reference to view all available options.","title":"Python Quickstart"},{"location":"getting-started/python/#python-quickstart","text":"With just a few lines of code, your python application can convert CSV and JSON data to awesome plain-text tables. Info These examples are all written for Python 3.","title":"Python Quickstart"},{"location":"getting-started/python/#examples","text":"CSV Data JSON Array import csv import io import json import requests csvdata = [ [ \"Pokemon\" , \"Type\" , \"Number\" ], [ \"Venusaur\" , \"Grass\" , 3 ], [ \"Charizard\" , \"Fire\" , 6 ], [ \"Blastoise\" , \"Water\" , 9 ], [ \"Pikachu\" , \"Electric\" , 25 ] ] output = io . StringIO () writer = csv . writer ( output ) writer . writerows ( csvdata ) url = \"https://mktable.p.rapidapi.com/convert?table-tablefmt=github\" headers = { \"Content-Type\" : \"text/plain\" , \"X-RapidAPI-Host\" : \"mktable.p.rapidapi.com\" , \"X-RapidAPI-Key\" : \"<rapid api key>\" } response = requests . request ( \"POST\" , url , data = output . getvalue (), headers = headers ) print ( json . loads ( response . text )[ \"data\" ]) # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | import json import requests data = [ { \"Pokemon\" : \"Venusaur\" , \"Type\" : \"Grass\" , \"Number\" : 3 }, { \"Pokemon\" : \"Charizard\" , \"Type\" : \"Fire\" , \"Number\" : 6 }, { \"Pokemon\" : \"Blastoise\" , \"Type\" : \"Water\" , \"Number\" : 9 }, { \"Pokemon\" : \"Pikachu\" , \"Type\" : \"Electric\" , \"Number\" : 25 } ] url = \"https://mktable.p.rapidapi.com/convert?table-tablefmt=github\" headers = { \"Content-Type\" : \"application/json\" , \"X-RapidAPI-Host\" : \"mktable.p.rapidapi.com\" , \"X-RapidAPI-Key\" : \"<rapid api key>\" } response = requests . request ( \"POST\" , url , data = json . dumps ( data ), headers = headers ) print ( json . loads ( response . text )[ \"data\" ]) # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 |","title":"Examples"},{"location":"getting-started/python/#next-steps","text":"Dive into the API Reference to view all available options.","title":"Next Steps"},{"location":"getting-started/ruby/","text":"Ruby Quickstart With just a few lines of code, your ruby application can convert CSV and JSON data to awesome plain-text tables. Examples CSV Data JSON Array require \"csv\" require \"uri\" require \"net/http\" require \"json\" csvdata = [ [ \"Pokemon\" , \"Type\" , \"Number\" ] , [ \"Venusaur\" , \"Grass\" , 3 ] , [ \"Charizard\" , \"Fire\" , 6 ] , [ \"Blastoise\" , \"Water\" , 9 ] , [ \"Pikachu\" , \"Electric\" , 25 ] ] uri = URI . parse ( \"https://mktable.p.rapidapi.com/convert\" ) https = Net :: HTTP . new ( uri . host , uri . port ) https . use_ssl = true request = Net :: HTTP :: Post . new ( uri . path . concat ( \"?table-tablefmt=github\" )) request . body = csvdata . map ( & :to_csv ) . join request [ \"Content-Type\" ] = \"text/plain\" request [ \"X-RapidAPI-Host\" ] = \"mktable.p.rapidapi.com\" request [ \"X-RapidAPI-Key\" ] = \"<rapid api key>\" response = https . request ( request ) puts JSON . parse ( response . body ) [ \"data\" ] # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | require \"uri\" require \"net/http\" require \"json\" data = [ { \"Pokemon\" : \"Venusaur\" , \"Type\" : \"Grass\" , \"Number\" : 3 }, { \"Pokemon\" : \"Charizard\" , \"Type\" : \"Fire\" , \"Number\" : 6 }, { \"Pokemon\" : \"Blastoise\" , \"Type\" : \"Water\" , \"Number\" : 9 }, { \"Pokemon\" : \"Pikachu\" , \"Type\" : \"Electric\" , \"Number\" : 25 } ] uri = URI . parse ( 'https://mktable.p.rapidapi.com/convert' ) https = Net :: HTTP . new ( uri . host , uri . port ) https . use_ssl = true request = Net :: HTTP :: Post . new ( uri . path . concat ( \"?table-tablefmt=github\" )) request . body = data . to_json () request [ \"Content-Type\" ] = \"application/json\" request [ \"X-RapidAPI-Host\" ] = \"mktable.p.rapidapi.com\" request [ \"X-RapidAPI-Key\" ] = \"<rapid api key>\" response = https . request ( request ) puts JSON . parse ( response . body ) [ \"data\" ] # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | Next Steps Dive into the API Reference to view all available options.","title":"Ruby Quickstart"},{"location":"getting-started/ruby/#ruby-quickstart","text":"With just a few lines of code, your ruby application can convert CSV and JSON data to awesome plain-text tables.","title":"Ruby Quickstart"},{"location":"getting-started/ruby/#examples","text":"CSV Data JSON Array require \"csv\" require \"uri\" require \"net/http\" require \"json\" csvdata = [ [ \"Pokemon\" , \"Type\" , \"Number\" ] , [ \"Venusaur\" , \"Grass\" , 3 ] , [ \"Charizard\" , \"Fire\" , 6 ] , [ \"Blastoise\" , \"Water\" , 9 ] , [ \"Pikachu\" , \"Electric\" , 25 ] ] uri = URI . parse ( \"https://mktable.p.rapidapi.com/convert\" ) https = Net :: HTTP . new ( uri . host , uri . port ) https . use_ssl = true request = Net :: HTTP :: Post . new ( uri . path . concat ( \"?table-tablefmt=github\" )) request . body = csvdata . map ( & :to_csv ) . join request [ \"Content-Type\" ] = \"text/plain\" request [ \"X-RapidAPI-Host\" ] = \"mktable.p.rapidapi.com\" request [ \"X-RapidAPI-Key\" ] = \"<rapid api key>\" response = https . request ( request ) puts JSON . parse ( response . body ) [ \"data\" ] # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 | require \"uri\" require \"net/http\" require \"json\" data = [ { \"Pokemon\" : \"Venusaur\" , \"Type\" : \"Grass\" , \"Number\" : 3 }, { \"Pokemon\" : \"Charizard\" , \"Type\" : \"Fire\" , \"Number\" : 6 }, { \"Pokemon\" : \"Blastoise\" , \"Type\" : \"Water\" , \"Number\" : 9 }, { \"Pokemon\" : \"Pikachu\" , \"Type\" : \"Electric\" , \"Number\" : 25 } ] uri = URI . parse ( 'https://mktable.p.rapidapi.com/convert' ) https = Net :: HTTP . new ( uri . host , uri . port ) https . use_ssl = true request = Net :: HTTP :: Post . new ( uri . path . concat ( \"?table-tablefmt=github\" )) request . body = data . to_json () request [ \"Content-Type\" ] = \"application/json\" request [ \"X-RapidAPI-Host\" ] = \"mktable.p.rapidapi.com\" request [ \"X-RapidAPI-Key\" ] = \"<rapid api key>\" response = https . request ( request ) puts JSON . parse ( response . body ) [ \"data\" ] # Output | Pokemon | Type | Number | |-----------|----------|----------| | Venusaur | Grass | 3 | | Charizard | Fire | 6 | | Blastoise | Water | 9 | | Pikachu | Electric | 25 |","title":"Examples"},{"location":"getting-started/ruby/#next-steps","text":"Dive into the API Reference to view all available options.","title":"Next Steps"}]}